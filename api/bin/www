#!/usr/bin/env node
/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

const io = require('socket.io')(server, {
  cors: {origin : '*'}
});
global._io = io;
io.on('connection', (socket) => {
  console.log('A user connected...');

  socket.on('message', (message) => {
    console.log('==========',message,'==========');
    io.emit('message', JSON.stringify(message));
  });

  socket.on('maintenance', (maintenance) => {
    console.log('==========',maintenance,'==========');
    io.emit('maintenance', JSON.stringify(maintenance));
  });

  socket.on('disconnect', () => {
    console.log('a user disconnected!');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

const db = require('../models');
// db.sequelize.sync()
//     .then(() => {
//       server.listen(port);
//       server.keepAliveTimeout = 125000; // (60 * 1000) + 1000;
//       server.headersTimeout = 125000; // (60 * 1000) + 2000;
//       // server.on('error', onError);
//       // server.on('listening', onListening);
//     })
//     .catch(err => console.log('err', err))

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

